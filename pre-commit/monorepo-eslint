#!/usr/bin/env bash
#
# Runs eslint on all changed files.
# Using the closest eslint.
set -euo pipefail

LOCAL_ESLINT_PATH='node_modules/eslint/bin/eslint.js'
FILE_EXTENSION_REGEX='\.(js|jsx)$'
ESLINT_OPTS="--max-warnings=0"

# Learn how to die first.
die() {
    local message=$1 && shift

    echo $message >&2
    exit 1
}

# Finds all package.json files that have eslint in it.
# Slightly hacky, but best we can do without extra dependencies.
find_package_json_with_eslint () {
    for package in `find . -name target -prune -o -name node_modules -prune -o -name .yarn-cache -prune -o -name package.json -print`; do
        if grep -q '"eslint":' $package; then
            dirname $package | sed "s#./##"
        fi
    done
}

# Make sure dependencies are installed so eslint is actually there.
ensure_eslint_installed() {
    local package="$1" && shift

    if [ ! -e $package/$LOCAL_ESLINT_PATH ]; then
        (cd $package && yarn install 2>&1) || die "Local eslint required but not installed, run yarn install failed in $package"
    fi
    if [ ! -e $package/$LOCAL_ESLINT_PATH ]; then
        die "Local eslint required but still missing after yarn install in $package"
    fi
}

# Finds the best eslint for a file.
# Considering that there might be multiple eslints.
find_eslint_for_file () {
    local file=$1 && shift
    local package_paths="$1" && shift

    # Best match is the one that (a) matches and (b) has more / in it.
    best_match=
    best_match_count=0
    for package in `echo "$package_paths"`; do
        # does it match at all?
        if [[ $file == $package/* ]]; then
            count=$(echo $package | grep -o / | wc -l)
            if [ $count -gt $best_match_count ]; then
                best_match=$package
                best_match_count=$count
            fi
        fi
    done

    if [ -n "$best_match" ]; then
        echo $best_match
    elif [ -e ./package.json ]; then
        echo .
    else
        return 1
    fi
    return 0
}

# Lints a single file.
# This finds the right eslint path and runs the file against it.
# If there are many files in the same package, this will find the package every time
# this is acceptable though since that is cheaper compared to the actual lint work.
lintafile () {
    local_eslint_package=$(find_eslint_for_file $file "$package_paths") || die "No eslint package found"
    ensure_eslint_installed $local_eslint_package

    if [ -n "$local_eslint_package/$LOCAL_ESLINT_PATH" ]; then
        exitcode=0
        for eslint in `echo "$local_eslint_package"`; do
            localfile=`echo $file | sed "s#^$eslint/##"`
            (cd $eslint && $LOCAL_ESLINT_PATH $ESLINT_OPTS $localfile 2>&1) || exitcode=$?
        done
        [ $exitcode -eq 0 ] || return $exitcode
    else
        die "There is no eslint for $file"
    fi
}


# Find eslint candidates
package_paths=$(find_package_json_with_eslint)

# Go through all changed (and staged) files and lint them.
# Exit only once all are done.
exitcode=0
for file in `git diff --cached --name-only --diff-filter=ACM`; do
    echo $file | egrep -q $FILE_EXTENSION_REGEX || continue
    echo $file

    file_exitcode=0
    lintafile || file_exitcode=$?

    if [ $file_exitcode != 0 ]; then
        exitcode=$file_exitcode
        echo $file >&2
    fi
done
exit $exitcode
